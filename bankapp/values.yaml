# Global values (if any)
global:
  domain: bankapp.local # Example domain for ingress

# Configuration for the front subchart
# NOTE: Build image locally: `docker build -t front:0.0.1-SNAPSHOT .` in front dir
front:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: front # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: front.bankapp.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    GATEWAY_URL: "http://localhost:8000"
    KEYCLOAK_ISSUER_URI: "http://localhost:8085/realms/master"
    KEYCLOAK_CLIENT_SECRET: "d3qytkUb62j7F85l85YZ9c96exiPljQr"

# Configuration for the accounts subchart
# NOTE: For local development (Minikube/Kind/Docker Desktop), build the image locally
# (e.g., `docker build -t accounts:0.0.1-SNAPSHOT .` in accounts dir)
# and ensure your K8s cluster can access local images (e.g., `minikube docker-env` or `kind load docker-image ...`).
accounts:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: accounts # Removed registry prefix
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8010
  ingress:
    enabled: true
    className: "nginx" # Specify your ingress controller class
    hosts:
      - host: accounts.bankapp.local # Use global domain or specific
        paths:
          - path: /
            pathType: ImplementationSpecific
  # Database connection details passed to accounts configmap
  config:
    # --- CORRECTED DB URL --- Using '<ReleaseName>-<Alias>' service name convention
    database_url: "jdbc:postgresql://{{ .Release.Name }}-accounts-db:5432/accountsdb"
    # Secret reference for password is more secure
    database_username: "accounts_user"
    # database_password_secret: "{{ .Release.Name }}-accounts-db-postgresql" # Reference to secret created by DB chart
    # database_password_secret_key: "postgresql-password" # Key within the secret

    JWT_ISSUER_URI: "http://localhost:8085/realms/master"

# Configuration for the accounts-db (PostgreSQL dependency)
# Values here are prefixed according to the Bitnami PostgreSQL chart's structure
# Check the Bitnami chart's values.yaml for all available options
accounts-db:
  enabled: true
  # Override values from the official postgresql chart
  auth:
    database: accountsdb
    username: accounts_user
    # Use existingSecret or provide password (less secure for production)
    # existingSecret: "{{ .Release.Name }}-accounts-db-postgresql" # Name of the secret to use/create
    password: "changeM3accounts!" # Example: Not recommended for production
  primary:
    persistence:
      enabled: true
      size: 1Gi # Small size for example