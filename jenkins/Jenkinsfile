pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_NAME         = 'mydb'
        DB_USER         = 'myuser'
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build & Unit Tests') {
            parallel {
                stage('Accounts Service') {
                    steps {
                        dir('accounts') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Front Service') {
                    steps {
                        dir('front') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('exchange-generator Service') {
                    steps {
                        dir('exchange-generator') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('exchange Service') {
                    steps {
                        dir('exchange') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('notification Service') {
                    steps {
                        dir('notification') {
                            sh 'mvn clean test'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/accounts:${IMAGE_TAG} accounts
                docker build -t ${DOCKER_REGISTRY}/front:${IMAGE_TAG} front
                docker build -t ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG} exchange-generator
                docker build -t ${DOCKER_REGISTRY}/exchange:${IMAGE_TAG} exchange
                docker build -t ${DOCKER_REGISTRY}/notification:${IMAGE_TAG} notification
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                    docker push ${DOCKER_REGISTRY}/accounts:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/front:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/notification:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Install PostgreSQL to TEST') {
            steps {
                sh """
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update

                helm upgrade --install postgres bitnami/postgresql \\
                  --namespace test --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.password=${DB_PASSWORD}
                """
            }
        }

        stage('Create DB Secrets for TEST') {
            steps {
                sh """
                kubectl create secret generic accounts-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -
                kubectl create secret generic exchange-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Install Kafka to TEST') {
            steps {
                sh """
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update

                helm upgrade --install kafka bitnami/kafka \
                  --namespace test --create-namespace \
                  --set zookeeper.enabled=true \
                  --set replicaCount=1 \
                  --set controller.replicaCount=1 \
                  --set listeners.client.protocol=PLAINTEXT \
                  --set auth.clientProtocol=PLAINTEXT \
                  --set auth.interBrokerProtocol=PLAINTEXT
                """
            }
        }

        stage('Install Keycloak to TEST') {
            steps {
                sh """
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update

                helm upgrade --install keycloak bitnami/keycloak \
                  --namespace test --create-namespace \
                  --set auth.adminUser=admin \
                  --set auth.adminPassword=admin \
                  --set service.type=ClusterIP \
                  --set extraEnvVars[0].name=KEYCLOAK_IMPORT \
                  --set extraEnvVars[0].value=/opt/bitnami/keycloak/data/import/bankapp-realm.json \
                  --set extraVolumeMounts[0].name=realm-volume \
                  --set extraVolumeMounts[0].mountPath=/opt/bitnami/keycloak/data/import \
                  --set extraVolumeMounts[0].readOnly=true \
                  --set extraVolumes[0].name=realm-volume \
                  --set extraVolumes[0].configMap.name=bankapp-realm-configmap
                """
            }
        }

        stage('Helm Deploy to TEST') {
            steps {
                sh """
                helm upgrade --install accounts my-bankapp/charts/accounts \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/accounts \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=accounts.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install front my-bankapp/charts/front \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/front \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=front.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                  
                helm upgrade --install exchange-generator my-bankapp/charts/exchange-generator \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchange-generator.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install exchange my-bankapp/charts/exchange \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/exchange \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchange.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install notification my-bankapp/charts/notification \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/notification \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=notification.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                """
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        stage('Install PostgreSQL to PROD') {
            steps {
                sh """
                helm upgrade --install postgres bitnami/postgresql \\
                  --namespace prod --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.password=${DB_PASSWORD}
                """
            }
        }

        stage('Create DB Secrets for PROD') {
            steps {
                sh """
                kubectl create secret generic accounts-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic exchange-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Install Kafka to PROD') {
            steps {
                sh """
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update

                helm upgrade --install kafka bitnami/kafka \
                  --namespace test --create-namespace \
                  --set zookeeper.enabled=true \
                  --set replicaCount=1 \
                  --set controller.replicaCount=1 \
                  --set listeners.client.protocol=PLAINTEXT \
                  --set auth.clientProtocol=PLAINTEXT \
                  --set auth.interBrokerProtocol=PLAINTEXT
                """
            }
        }

        stage('Install Keycloak to PROD') {
            steps {
                sh """
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update

                helm upgrade --install keycloak bitnami/keycloak \
                  --namespace test --create-namespace \
                  --set auth.adminUser=admin \
                  --set auth.adminPassword=admin \
                  --set service.type=ClusterIP \
                  --set extraEnvVars[0].name=KEYCLOAK_IMPORT \
                  --set extraEnvVars[0].value=/opt/bitnami/keycloak/data/import/bankapp-realm.json \
                  --set extraVolumeMounts[0].name=realm-volume \
                  --set extraVolumeMounts[0].mountPath=/opt/bitnami/keycloak/data/import \
                  --set extraVolumeMounts[0].readOnly=true \
                  --set extraVolumes[0].name=realm-volume \
                  --set extraVolumes[0].configMap.name=bankapp-realm-configmap
                """
            }
        }

        stage('Helm Deploy to PROD') {
            steps {
                sh """
                helm upgrade --install accounts my-bankapp/charts/accounts \\
                  --namespace prod --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/accounts \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=accounts.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install front my-bankapp/charts/front \\
                  --namespace prod --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/front \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=front.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install exchange-generator my-bankapp/charts/exchange-generator \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchange-generator.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install exchange my-bankapp/charts/exchange \\
                  --namespace prod --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/exchange \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchange.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install notification my-bankapp/charts/notification \\
                  --namespace prod --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/notification \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=notification.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                """
            }
        }
    }
}